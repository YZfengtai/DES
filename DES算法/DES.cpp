//DES算法的实现
#include<iostream>

using namespace std;

//初始置换表
int IP_Table[64] = { 58,50,42,34,26,18,10,2,
					 60,52,44,36,28,20,12,4,
					 62,54,46,38,30,22,14,6,
					 64,56,48,40,32,24,16,8,
					 57,49,41,33,25,17,9,1,
					 59,51,43,35,27,19,11,3,
					 61,53,45,37,29,21,13,5,
					 63,55,47,39,31,23,15,7 };
//逆初始置换表
int FP_Table[64] = { 40,8,48,16,56,24,64,32,
					 39,7,47,15,55,23,63,31,
					 38,6,46,14,54,22,62,30,
					 37,5,45,13,53,21,61,29,
					 36,4,44,12,52,20,60,28,
					 35,3,43,11,51,19,59,27,
					 34,2,42,10,50,18,58,26,
					 33,1,41,9,49,17,57,25 };
//扩展置换表
int E_Table[48] = { 32,1,2,3,4,5,
					4,5,6,7,8,9,
					8,9,10,11,12,13,
					12,13,14,15,16,17,
					16,17,18,19,20,21,
					20,21,22,23,24,25,
					24,25,26,27,28,29,
					28,29,30,31,32,1 };
//置换函数P
int P_Table[32] = { 16,7,20,21,
					29,12,28,17,
					1,15,23,26,
					5,18,31,10,
					2,8,24,14,
					32,27,3,9,
					19,13,30,6,
					22,11,4,25 };
//S盒
int S[8][4][16] =//S1
{ { { 14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7 },
{ 0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8 },
{ 4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0 },
{ 15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13 } },
//S2
{ { 15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10 },
{ 3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5 },
{ 0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15 },
{ 13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9 } },
//S3
{ { 10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8 },
{ 13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1 },
{ 13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7 },
{ 1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12 } },
//S4
{ { 7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15 },
{ 13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9 },
{ 10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4 },
{ 3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14 } },
//S5
{ { 2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9 },
{ 14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6 },
{ 4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14 },
{ 11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3 } },
//S6
{ { 12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11 },
{ 10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8 },
{ 9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6 },
{ 4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13 } },
//S7
{ { 4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1 },
{ 13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6 },
{ 1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2 },
{ 6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12 } },
//S8
{ { 13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7 },
{ 1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2 },
{ 7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8 },
{ 2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11 } } };

//置换选择1
int PC_1[56] = { 57,49,41,33,25,17,9,
				 1,58,50,42,34,26,18,
				 10,2,59,51,43,35,27,
				 19,11,3,60,52,44,36,
				 63,55,47,39,31,23,15,
				 7,62,54,46,38,30,22,
				 14,6,61,53,45,37,29,
				 21,13,5,28,20,12,4 };
//置换选择2
int PC_2[48] = { 14,17,11,24,1,5,
				 3,28,15,6,21,10,
				 23,19,12,4,26,8,
				 16,7,27,20,13,2,
				 41,52,31,37,47,55,
				 30,40,51,45,33,48,
				 44,49,39,56,34,53,
				 46,42,50,36,29,32 };
//左移位数表
int Move_Table[16] = { 1,1,2,2,
					   2,2,2,2,
					   1,2,2,2,
					   2,2,2,1 };
//密钥
int key[64] = { 0,0,0,0,0,0,0,1,
				0,0,0,0,0,0,1,0,
				0,0,0,0,0,1,0,0,
				0,0,0,0,1,0,0,0,
				0,0,0,1,0,0,0,0,
				0,0,1,0,0,0,0,0,
				0,1,0,0,0,0,0,0,
				1,0,0,0,0,0,0,0 };

//子密钥
int subkey[16][48] = {};

//初始置换函数
void IP(int M[64], int IP_M[64]) {
	for (int i = 0; i < 64; i++) {
		IP_M[i] = M[IP_Table[i] - 1];
	}
}

//扩展运算函数
void E(int R[32], int E_R[48]) {
	for (int i = 0; i < 48; i++) {
		E_R[i] = R[E_Table[i] - 1];
	}
}

//异或函数
void XOR(int *A, int *B, int *C, int length) {
	for (int i = 0; i < length; i++) {
		C[i] = A[i] ^ B[i];
	}
}

//S盒替换函数
void S_Box(int A[48], int B[32]) {
	int i, j, k, m, n;
	int output[32] = {};
	for (i = 0; i < 8; i++) {
		j = 6 * i;
		k = 4 * i;
		m = A[j] * 2 + A[j + 5];
		n = A[j + 1] * 8 + A[j + 2] * 4 + A[j + 3] * 2 + A[j + 4];
		int temp = S[i][m][n];
		output[k] = temp / 8;
		temp = temp % 8;
		output[k + 1] = temp / 4;
		temp = temp % 4;
		output[k + 2] = temp / 2;
		temp = temp % 2;
		output[k + 3] = temp;
	}
	for (i = 0; i < 32; i++) {
		B[i] = output[P_Table[i] - 1];
	}
}

//置换函数P
void P(int A[32], int B[32]) {
	for (int i = 0; i < 32; i++) {
		B[i] = A[P_Table[i] - 1];
	}
}

//逆初始置换函数
void FP(int M[64], int FP_M[64]) {
	for (int i = 0; i < 64; i++) {
		FP_M[i] = M[FP_Table[i] - 1];
	}
}

//生成子密钥
//生成子密钥
void CreateSubKey() {
	int C[28] = {};
	int D[28] = {};
	int CD[56] = {};
	int tempC, tempD; 
	for (int i = 0; i < 28; i++) {
		C[i] = key[PC_1[i] - 1];
		D[i] = key[PC_1[i + 28] - 1];
	}
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < Move_Table[i]; j++) {
			tempC = C[0];
			for (int k = 0; k < 27; k++) {
				C[k] = C[k + 1];
			}
			C[27] = tempC;
			tempD = D[0];
			for (int k = 0; k < 27; k++) {
				D[k] = D[k + 1];
			}
			D[27] = tempD;
		}
		for (int j = 0; j < 28; j++) {
			CD[j] = C[j];
			CD[j + 28] = D[j];
		}
		for (int j = 0; j < 48; j++) {
			subkey[i][j] = CD[PC_2[j] - 1];
		}
	}
}

//加密函数


int main() {
	// 生成明文
	int text[64] = {
		0,1,0,1,0,1,0,1,
		1,0,1,0,1,0,1,0,
		0,1,0,1,0,1,0,1,
		1,0,1,0,1,0,1,0,
		0,1,0,1,0,1,0,1,
		1,0,1,0,1,0,1,0,
		0,1,0,1,0,1,0,1,
		1,0,1,0,1,0,1,0
	};

	// 打印明文
	cout << "明文: ";
	for (int i = 0; i < 64; i++) {
		cout << text[i];
	}
	cout << endl;

	// 密文
	int cipher[64] = {};
	// 生成子密钥
	CreateSubKey();
	// 初始置换
	int IP_text[64] = {};
	IP(text, IP_text);
	/*//打印置换后的明文	
	cout << "初始置换后的明文: ";
	for (int i = 0; i < 64; i++) {
		cout << IP_text[i];
	}*/
	// 左右分组
	int L[32] = {};
	int R[32] = {};
	for (int i = 0; i < 32; i++) {
		L[i] = IP_text[i];
		R[i] = IP_text[i + 32];
	}
	// 16轮迭代
	for (int i = 0; i < 16; i++) {
		int temp[32] = {};
		int E_R[48] = {};
		int S_R[32] = {};
		int P_R[32] = {};
		int XOR_R[48] = {};
		E(R, E_R);
		XOR(E_R, subkey[i], XOR_R, 48);
		S_Box(XOR_R, S_R);
		P(S_R, P_R);
		XOR(L, P_R, temp, 32);
		for (int j = 0; j < 32; j++) {
			L[j] = R[j];
			R[j] = temp[j];
		}
	}
	//左右交换
	int tempLR[64] = {};
	for (int i = 0; i < 32; i++) {
		tempLR[i] = R[i];
		tempLR[i + 32] = L[i];
	}
	//逆初始置换
	FP(tempLR, cipher);
	//打印密文
	cout << "密文: ";
	for (int i = 0; i < 64; i++) {
		cout << cipher[i];
	}
	cout << endl;


	return 0;
}

